{
  "imageUrl": "https://firebasestorage.googleapis.com/v0/b/facorio-blueprints.appspot.com/o/ProviderBase_v09.png?alt=media&token=c8c73e45-a180-4a06-8a3a-c71d1af570f0",
  "lastUpdatedDate": 1660848192956,
  "numberOfFavorites": 20,
  "author": {
    "userId": "7fZJw6U2IuNkODcVttXvTOopf5G3"
  },
  "authorId": "7fZJw6U2IuNkODcVttXvTOopf5G3",
  "createdDate": 1517712438450,
  "descriptionMarkdown": " \n**A system to deliver items by train from a central base to outposts.** \n\nsee also: [ItemDelivery - ProviderBase](https://factorioprints.com/view/-L4ThUDlc3ebWiNTQHbv)\n\nsee also: [ItemDelivery - RequesterBase](https://factorioprints.com/view/-L4Thzw_FogBACMitAlR)\n\nsee also: [ItemDelivery - TestSetup](https://factorioprints.com/view/-L4Tj7Wzf3BhoIh_kFoE)\n\nsee also: [ItemDelivery - Requester Module \"Inhibitor\"](https://factorioprints.com/view/-LX9bQG1RsJzUXNQPRm3)\n\nsee also: [ItemDelivery - Requester Module \"BotLossPrevention\"](https://factorioprints.com/view/-LXA1qPbtXRp8KI8ZPxW)explanation is below. \n\nexpressions like \"blockR1\" are references to the picture and the explanation where you can find a block R1 in the RequesterBase. \n\na changelog is at the end of the documentation. \n\n---\n- **tl;dr:**\n - vanilla, no mods needed\n - for double-headed 2-4-2 trains (single-headed-trains are untested but should be possible)\n - compatible to LHD & RHD (left hand drive & right hand drive)\n - intended for lategame basebuilding (like a bootstrap for a bigger base or an outpost)\n - use a constant combinator for up to 5 sequential requests (more variants possible, easily extendible, details below)\n - all RequesterBases have the same name (multiple stations are possible, see blockR3 to set station ID and prevent request collisions)\n - requires green cables along train-network (red cables are optional for this system)\n - connect green cables via big power poles to train-network\n \n---\n- **overall features:**\n - system delivers exact quantities of requested items\n - while loading the full stack-inserter bonus is utilized \n - no filters in cargo wagons are nessesary (-> easy train setup)\n - multiple different steps can be configured (i.e. “first the roboports & powerpoles, secondly the chests, then the inserters, at last the rest”)\n - delivery must be completely removed from passive-provider-chests, before next step is requested \n - trash is loaded from outposts (i.e. wood & stone) after unloading the delivery\n - train returns home after delivery\n - simple train-activity status (see below)\n - different pulse-based systems are possible as a index (signal-z) is used \n - system is \"immune\" to signals without or wrong z-index (permanent signals are problematic)\n\n---\n- **quick-setup:**\n - build ProviderBase in logistic range of your ME (“make everything”) \n   - connect green cable from big power pole to train wire network\n - place and configure train  \n   - set train configuration (see below), \n   - send train to ProviderBase (to connect it to the station)\n - build RequesterBase \n   - connect green cable from the big power pole \n - set 5 item-requests (requests may be small but NOT empty; see operation variants below)\n - enable constant combinator in blockR1 (see picture)\n - watch automation / wait for delivery \n\n--- \n- **additional setup-notes**\n - if using multiple requester stations set different IDs for each one\n   - increment each ID by at least 10, better 20\n   - IDs also act as a priority, lower IDs will send their request earlier\n   - note: sending a request will supress all other requester stations until the first request is fulfilled (blue lamp is turned on in R10)\n - the train will not unload until you have at least one logistic bot in requester-network\n   - simply deliver 4 or more logi-bots in your first request. \n   - if there are no logi-bots present, the long hand inserter will take one from the second wagon directly into the roboport. \n   - the long hand inserter is only active if there are zero logi-bots \n - requests can only be made if the passive providers are empty \n   - this prevents a clogged unload-chests and therefore incomplete deliveries\n   - the buffer chests act as a limited buffer in case you delivered to much or to send out the request before everything is used up\n - when the train returns to the provider station it is completely unloaded into active providers\n   - only after unloading the blue light is turned off to signal readiness for the next request \n\n---\n- **limitations:**\n - Requests can only be made at RequesterBase – multiple pre-programmed steps are possible\n - Requests / steps without items are not processed. They just open the station for a delivery that was meant for another station. Avoid this! \n - Maximum of  40 different stacks (40 unique item-names)\n - Maximum of 160 stacks (i.e “1600 beacons”)\n - Conclusion: don’t fill all stacks/wagons when requesting items with small stacksize. \n - requests with more than 8 unique items cannot be buffered completely \n   - they must be used up completely at the requester before the next step can be requested\n - if requests are larger than the train capacity the delivery can be triggered manually (in the train-menu: send to requester station)\n   - left items are cleaned from provider and unloaded when train returns\n - collisions of signal-pulses are not handled \n   - i.e. if multiple signals are sent during the same tick, or if a permanent signal is on the train-network\n   - non-item-signals (like signal-red) cannot be loaded on a train and therefore block the departure \n   - signals used in the request pulses are filterd out before determining the load\n\n---\n- **train configuration:**\n - sender-station: circuit signal G > 0 AND 5 seconds of inactivity (set conditions in this order!)\n - requester-station: 5 seconds of inactivity\n \n---\n- **operation variants:**\n - deliver 5 batches of items \n   – just set your requests in blockR2 from right to left and then enable the combinator in blockR1\n - deliver less than 5 batches of items \n   – set your requests in blockR2 \n   - remove the constant combinators you don’t need \n   - leave the left combinantor; match the left decider combinator (and lamp) to your number of steps\n   - the left combinator sends out -1 signal-w and -753 signal-z to negate the enable combinator in R1\n - deliver more than 5 batches of items \n   – extend blockR2 \n   - increment the comparator to signal-S in the same way as the other decider combinators, \n   - set the number of steps / request-batches in the lowest combinator of blockR7\n   - the last step should always send -1 signal-w and -753 signal-z to negate the enable combinator in R1\n - deliver repeatedly different batches \n   – set the number of steps decreased by 1 in the lowest combinator of blockR7\n   - since there is no \"last step\" no combinator is needed to cancel the enable combinator in R1\n   - depending on what you deliver the repetition may stop if the last request cannot be unloaded \n - Note: the lamps use the same number as the respective decider combinator of the same column in blockR2\n - Note: counting of steps starts at 0 – so the comparison “smaller than” (blockR7) will lead to the specified results\n\n---\n- **train activity status:** (of RequesterBase)\n - one red light – train is inactive, ready to receive request (default status)\n - red light & blue light – train is active somewhere else\n - yellow light & blue light – a request by this station has been sent and is loaded onto the train\n - yellow, blue & green light – the train (with the delivery) is on its way to this station\n\n---\n**Detailed block-description of RequesterBase:** [Picture](https://i.imgur.com/On368IC.jpg)\n\n(ProviderBase below)\n\n1. **On-Off-Switch.** \n - Is off when blueprint is built. Switch on when you are ready to request. \n - Only switch on when you have successfully connected the station to your track-network. \n - Connect via green cable to big electric poles. \n \n2. **Request-stack:** \n - each column ends with a constant combinator that contains the items to request. \n - Max. 160 stacks \n - Max. 40 unique stacks\n - Combinators are permanently “on”. \n - Each column is requested separately from right to left. \n - Steps are checked via signal-S. Counting starts at 0. \n - Expand the blockR by incrementing signal-S in lamps and decider-combinators. Also increase lowest combinator in blockR7. \n - To disable the station after the last step, make the last combinator send signal-W=-1 and signal-Z=-753. This effectively disables the timer (blockR3). \n - Do not litter your request with virtual signals. The signal-4 and signal-2 that can be seen in the example have the value 0. Requests for virtual signals cannot be loaded to the train and will prevent departure of the train from the delivery-station. \n\n3. **Delay-Timer:** \n - if conditions 2, 3 and 4 (from blockR4) are met (signal-W=3) the timer starts to count in ticks. \n - If the timer has run down signal-W=3 is piped through. \n - The delay also acts a Station ID. Duplicate values for the timer could result in conflicting requests if you are using multiple requester-stations. Do not use duplicate IDs. \n - IDs / the delay should be incremented in multiples of 10. \n - Use the constant combinator to set the value. \n\n4. **Check if all request-conditions are met:** \n - each true condition sends a W=1. \n 1. All passive provider chests are empty \n 2. Train is ready / blue light is off \n 3. Train-station is currently closed / yellow light is off \n 4. Station is enabled (see blockR1).  \n - If W=4 all signals are piped through. Also see blockR2. \n\n5. **remove internal signals:** \n - before sending the current request-step to the main-network the internal signal signal-W and signal-S are removed. \n - The system index signal-Z=753 is kept. \n\n6. **load-unload-controller:** \n - counts content of incoming train\n - Unloading-inserters are active when train is present and train has cargo. \n - Unloading-inserters decrease initial cargo-count and are disabled when initial cargo-count reaches zero. \n - Loading-inserters are disabled until train is present and initial cargo-count reaches zero. \n - The constant combinator in the lower right is “off”. Turn it on and off again to reset the steps of the request stack (also see blockR2 and blockR7). \n\n7. **step-counter:** \n - each time a train enters the station the step-counter in incremented by 1. \n - The lowest decider combinator holds the reset-condition for the step-counter. \n - If you want to request in ever-repeating cycles, then set the lowest decider combinator to “signal-S [smaller than] 5” (value in blueprint is 6). \n - Remember: counting starts at 0. \n - Remember: items are only requested when passive provider-chests are empty. \n - Note: empty steps do not request an empty train and lead to an “unclean state” of the station, because the timer in blockR3 keeps running. \n\n8. **detect present train**\n - After 350 ticks after the train entered the station the signal-R will be sent to blockR9. This will reset the signal-L in the memory-cell and disable the train stop. \n\n9. **enable and disable train stop:** \n - when a request is sent, it will be accommodated by the signal-Z=753\n - If signal-Z is detected signal-L will be saved in a SR-latch. \n - As long as signal-L equals 1 the yellow lamp will light up (also see blockR2). \n - If the yellow lamp is on, the train stop is enabled. \n - If signal-Z is detected and signal-blue is smaller than 1 the signal is sent to the delivery-station.   \n \n10. **network interface and status-counter:**\n - Upper left arithmetic combinator is the connection to the public network. \n - Other combinators count how often the signal-Z=753 is sent and will therefore show the readiness of the train.  \n - Requests will only be sent if the blue light is off (signal-blue=0). \n\n\n---\n\n**Detailed block-description of ProviderBase:** [Picture](https://i.imgur.com/niGQ51w.jpg)\n\n1. **Input-Filter:** \n - blocks everything without correct signal-Z-index (=753) \n - subtracts signal-U which is sent, when the train leaves the ProviderBase (activates green light in RequesterBase)\n - subtracts signal-V which is sent, when the train signals completion of return & unload\n\n2. **Request memory-cell:** \n - saves incoming request for later comparison\n - memory is wiped, when signal-black=1 (signal-black comes from blockP7)\n\n3. **requester & separator:** \n - requests and separates exact amounts\n - separate copy of the partitial request is saved in a additional memory-cell. this copy sets the request of the requester-chest\n - the lower vertical inserter subtracts grabbed content from memory-cell (it grabs the full stack-size)\n - if subtraction in memory-cell results in a negative value, the negative value is multiplied with -1 (to make it positive) and outputted as signal-I'. this signal-I' is used to set the stack-override-value in the upper vertical inserter, which removes items from the cycle into an active provider chest. \n - note: it is necessary to limit the steel-chest to 1 stack, if something backs up, calculations will still make correct values of signal-I'.\n - the remaining items are grabbed by the horizontal inserter and are moved to the train. \n - the next downward-facing inserter counts all items it grabbed, to disable the unloaders (i.e. blockP9)\n - memory-cells ware wiped when signal-black is sent\n\n4. **wagon separator:** \n - divides initial request by four and distributes to instances of P3.\n - initial request is divided by two, integer division excess (modulo) is added to one set of results\n - then both ammounts are divided by two again, modulo is added again to one set of results\n - blockP4' to blockP4''', make those calculations \n - several arithmetic combinators calculate \"[each]+0\" to maintain tick-synchronicity \n\n5. **train-load-counter:** \n - reads train and compares current load with request\n - signal-L is only sent when memory-cells are empty to prevent instant departure (before a new request is recieved)\n - current load is multiplied by -1, signals are piped through if signal-L=0 \n - filters out the train-ID (signal-T)\n\n6. **go-pulse-generator:** \n - if request minus train-content = 0 then signal-[g]o \n - signals of negative train-content and request-memory-cell are combined in a decider combinator [each=0] output signal-G=1\n - signal-G=1 is made to a pulse and sent to the train (which is the first wait-condition) \n\n7. **several readychecks:** \n - fulfillment of each of those questions increases signal-R by 1 \n 1. is the signal-L=0? (has the signal-black been sent to wipe the memory-cells from the previous request)\n 2. is the train present? (read train-ID as signal-T; is signal-T greater than 1)\n 3. is the train-content=0? (trash unload complete; read train without signal-T)\n - signal-R=3 is required to send the pulse witz signal-V to the RequesterBase (turns off blue light, resets ID-counter)\n\n8. **the track-signal-interface:** detects the leaving and incoming train. \n - rail-signals send custom signals (open interface to inspect)\n - a leaving train pulses signal-white with signal-Z=753 (second signal for the RequesterBase to switch on green light)\n - a leaving train also sends signal-black into the ProviderBase to wipe the memory-cells\n - chain-signals could have been used since .16\n\n9. **trash unloaders:** pairs of stack-inserters unload into active providers (for every wagon). \n - are only active if memory-cells are empty (memory-cells are cleared when train leaves, before next request is received)\n\n \n---\n\n- **Low-level-debugging:**  \n\n - since the update 2018-10-12 all ID- / Delay-counter and requester stations are reset, when the train completely unloads in the provider station\n   - so to reset a faulty state, simply return the train to the provider station\n   - if the train is inside the provider station, manually drive it out of the provider station and drive it back in. \n - In all other error-cases it should be sufficient to turn on the \"step-reset\"-combinator (r7) for a short time. turn it off afterwards. \n\n--- \n\n- ** changelog: ** \n- 2018-08-07 (v02): \n - added some wires to reset whole station from \"step-reset\"-combinator in r7\n- 2018-09-13 (v08):\n - ProviderBase: now all wagons are loaded simultaneously. \n - ProviderBase: cleaned up wiring\n - more resilient status: when the train returns to the providerbase all requesters are reset \n- 2018-10-12 (v09):\n - updated and clarified documentation \n - returning and completely unloading the train in the provider station will send a special signal to: \n   1. close all requester stations (yellow light off). \n   2. reset the blue status in all requester stations.\n   3. reset all request timers simultaneously (request timer =  ID). \n - old versions of providers & requesters should be updated, as they do not process the new reset-signal.\n   - updates can be \"printed over\" and do not require complete reassembly of the requester station\n   - updates only require one additional arithmetic- and decider-combinator per requester \n- 2019-01-26 (v10): \n - doubled loading speed of ProviderBase\n   - Requesters are compatible. No update needed. \n - added possibility to add specialized modues to a certain RequesterBase\n   - emergency buildBot requester [(see here)]((https://factorioprints.com/view/-LXA1qPbtXRp8KI8ZPxW))\n   - buildup blocker for higher IDs [(see here)](https://factorioprints.com/view/-LX9bQG1RsJzUXNQPRm3)\n- 2020-09-15 (v11): \n - cleaned up wires\n - added request fulfillment indicator to ProviderBase\n- 2022-08-18 (v12)\n - resilience: if a second request is received before the current request is delivered, a global reset signal is sent te reinitialize all timers. \n   - steps in Requesters are not changed and will be sent again. \n   - The reset signal unloads the current train. \n   - Old Requesters are compatible (up to v09). \n - added short explanation in Blueprint. \n\n--- ",
  "image": {
    "height": 363,
    "id": "niGQ51w",
    "type": "image/jpeg",
    "width": 1502
  },
  "blueprintString": "",
  "fileName": "ProviderBase_v09.png",
  "tags": {
    "2": "/train/right-hand-drive/",
    "3": "/train/left-hand-drive/",
    "4": "/version/1,0/",
    "0": "/mods/vanilla/",
    "1": "/train/loading station/"
  },
  "title": "ItemDelivery – ProviderBase [2022-08-18 v12]",
  "favorites": {
    "NECUCjOStQdiU4UQrXooDE6HBm62": true,
    "Jl4maxbqAqZU4sBtdNMfT1ggq6P2": true,
    "W59sIXvaJTWGeUaHKYcHkCxnDqF3": true,
    "6PonYNhVO4SkExbWRA4SLnNmEpX2": true,
    "bLTqwxErRoTWxYhqusKyAaSW81E2": true,
    "edD3c21p5USPtTIgIdqW659UNPs1": true,
    "hxTZuEEgETSkPjmuO9llg2T7bQe2": true,
    "te3OrZw61WVrDgLQgyxVRmUnyKv1": true,
    "NccTZW4SjvhKiXQlfmazRXNa84h2": true,
    "NZtjs8uG73gWW6jkkFVphdw39sy1": true,
    "iZLgeauJDGUVkJzmeG84taoTDVc2": true
  }
}
