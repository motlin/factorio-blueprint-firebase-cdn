{
  "author": {
    "userId": "5Y3URRKKw9MUkfrSG2hYwilx2pi2"
  },
  "authorId": "5Y3URRKKw9MUkfrSG2hYwilx2pi2",
  "blueprintString": "0eNrtWdtu4zYQ/RWCz/TCsizfgO5Lnwr0qSjQAkFg0NI4ZiNRWpJKagT+gH5If6xf0hlSFzvrbKw02w2QRR48pufGwzPDkfLAN3kNlVHa8dUDV2mpLV9dPXCrbrTMaU3LAviKZ5CqDMwoLYuN0tKVhh8EVzqDP/kqOlwLDtoppyDY+y/7ta6LDRhUEK2fAjJVFyPIIXVGpaOqzIELXpUWjUtNEdHhaDJefEgE3/NVPEPpcBCf+Zx0Pjd1fjtS2oJx+MM5Z7MTZ4JnymB8r7IQHHftTJmvN7CTdwp3hnapMmmt3Bq03OSQ8ZUzNYhuGU2yLsZWGevWPWRuX1Fad8q4Gle6PIPGKN1BekvoEdpOEvRj+lJU0nhgV/yj/7mJZUBm653UGUV1iIIN2ZwDJe6CGfhUg3V0ZDv8fAaWpYflS0B0O+4h2crcApo1odZblWM8S1Y2wBvI0LJE8E7jZLXJuDJlCtYqfTOqtaKMPyF8uDv8TZem8FCewPSDX6gJwflkfLjGvzOYTAcQJX4vREkGESV+U0RBntyCG21ryF+NJLMBJBm/F5LMB5Fk/KZIYqWDHIkBwygSPUWQxfArLHruClteTLpoOX8vpIvGA1h3jMtbYF1e3o8y0JjkfmRxh6mrDbxak4oGz1HRcvocCaN+kDoz5H1xbJhHFxGxcdvD7+E9/nY1mIEGD+/wGYg0h5a1q2r3eIx9xh3cgdm7Hc4e/OCx51Uu95hzBjY1qgr74z/SEVkWoGPlltH4zNKdqiwryjvI2GbP2jL+wM+hHQ9FO37vaNMwaAnscO8zuvcvRXs6FO3xd2633O5u0Iu5nQxD+6h5f0cbbw7W3BysuzkuRn728h4efz3kn3iwO5kb8Lp7BP4/f/3t9/iEt+Pp/wJP7RKsm4PDKeRL7s/f4F8hUD+gnjiPLnb9UoYeDW/Vfu2njvXWlMVaaXTWjkRPU/cXHOYscztg27I2zI9mlmFKrEmHSXZjADTzkVgIy9SWyTw/sSGiSaW9r7Q0xMGjikBoCoxTslzWOt2xUkNzBZyvgfnLb9b4m3Wf7jBw2kRHlxsiR/ef9a2P344VP0uHZzRiFnTDjuEcwI1QTwTqFtLsz589+9WzpT1ZVqA1eaCgyraRMH2F8RzDQwV1ByEl7PXs90blPIkWLx8YvjfSd9ZI+xL8D32U6iH0P7TH50omnZNYGxmxv/2xvfztB/bbDouqK6LuB4YMg2ZaQFib5gnoyXfmqJ/mRBOuK6BQsfKC4li+fL57Ax32rXRK6l+575btfflEt6SD8z3t6LD+qC31tApkYxd0BdvUDq2lvmlaXfDN7hFzYpJ3f/ZUJ/37FlsgsS54sdUfa/LE/2aioW100jicPn65Ra8n/i+qvPad2j1avIgnvtIfn78FeFyrIigVIPXRWHa2MwwetNhPjoz0CVUpeENRNLKurE46mGD3O4Vu8PEFgkVBeuOgcJ6Dk8EcjJ7lYDzQZ7RMTn3isVP50KFfRSIRC5FcCy9hzZA4EZFAfkZexM+lmKIY0+rMr05JjBuxU0h6hRmJ00bsFOa9AsYUUeSjkYhAkbgkhcQrLHuzaNzbRT7NOGTc5BkHGf+ioD8RGHohJiTHIdU4yL1OfKQzDdnGQe51pkc6SUgtDnKvkxzpzEieB3lO+c+DjpcXrRzTvvxecIn8kD4h36JAH2GPeFJEYnqR3v0/W/BcbnC0wYs2vDeiqkZqa2S0wVKpSoNr9GY4J2V8bLeeDMlsspwul8l0HuMjAtLgX0kPqf8=",
  "createdDate": 1732815660418,
  "descriptionMarkdown": "<ins>Background</ins>  \nI had the somewhat unique (and self-inflicted) problem that my rocket silo is far away from my base. I thus have 4 requestor chests at my base next to a train stop in which each chest requests one rocket component (chest 1: 720 blue chips; chest 2: 720 units of rocket fuel; chest 3: 1 satellite; chest 4: 720 low-density structures). The inserters transfer items into the train, which brings them to the silo.\n\nBut, since my base produces these items unevenly, I ran into a problem rather quickly. The bots easily delivered 720 units of rocket fuel, for example, but only a few blue chips and low-density structures. The train shuttled these to the silo; meanwhile, bots bring more rocket fuel to the requestor chest, so the train eventually shuttles that over while bringing only a handful more of the other components, and so on until there’s a giant backlog of rocket fuel at my silo and on my train while my base produces enough of the other components for a rocket launch.\n\nTo combat this, I wanted a system in which the inserters remain disabled until all four chests contained 720 of the three components and the 1 satellite, then the inserters turn on and move precisely 720 of each component and 1 satellite, then shut off until the chests contain 720 of the three components and 1 satellite again. This meant anytime the train moved cargo to the rocket silo, it was enough for exactly one launch and there’s no backlog.\n\nMost people would just move the silo into the base and avoid this altogether, but I didn’t want to do that, so I spent about a day and a half figuring out a circuit to do the above. In case anyone in the future wants an overcomplicated solution to a non-problem like I did, I’m sharing what I came up with.\n\n<ins>Circuit overview</ins>  \nReferring to the image, we have the four chests and four inserters as described. We also have nine decider combinators labeled A through I. To start, all four chests link to Decider A, which is set up as:\n\nInput condition: blue chip, rocket fuel, and low-density structure ≥ 720; satellite ≥ 1  \nOutput: [set] = 1\n\nDecider A outputs to Decider B, which acts as an SR (or RS?) latch\n\nInput condition: [set] > [reset]  \nOutput: [set] = 1\n\nIn this case, Decider B outputs the [set] signal if the chests have the correct number of items to Decider C, which repeats the signal on a different colored wire (the wires coming out of Decider B are red; I needed them to be green):\n\nInput condition: [set] > 1  \nOutput: [set] = 1\n\nDecider C links to the inserters, which are set up to enable when [set] > 1.\n\nEach inserter, meanwhile, outputs to Deciders D through G, one decider per inserter. These act as counters and keep track of how many items each inserter has moved:\n\nInput condition: [RED] = 0  \nOutput: everything – input count\n\nInitially, there is no [RED] signal, so the deciders output “everything” – every input they receive. All of them output to Decider H, which has \n\nInput condition: blue chip, rocket fuel, and low-density structure ≥ 720; satellite ≥ 1  \nOutput: [reset] = 1\n\nDecider H outputs to Decider B (the latch), which compares the [set] and [reset] signals. The former arrives when the chests are full and ready for the inserters to unload. The latter arrives when the inserters have moved the correct number of items. The former results in Decider B outputting [set] to turn the inserters on, whereas the latter results in Decider B doing nothing because [reset] > [set] and the input condition of Decider B is false. If Decider B does nothing, no [set] signal goes to the inserters, and the inserters remain off.\n\nFinally, Decider H outputs to Decider I, which has\n\nInput condition: [reset] > 0  \nOutput: [RED] = 1\n\nIf we have a [reset] signal, it means the inserters have moved the correct number of items per Decider H. Decider I thus sends [RED] = 1 to Deciders D-G, which resets the counters because then, the input condition of [RED] = 0 becomes false.\n\n<ins>How to use</ins>  \nPut this entire thing next to your train tracks such that the middle two chests align with a car and the far right and left chests align with separate cars. Ensure the chests are set up to request rocket part components as mentioned, then just let your bots and the circuit do their thing.",
  "image": {
    "id": "BTM0Bgy",
    "type": "image/png"
  },
  "imageUrl": "https://imgur.com/BTM0Bgy",
  "lastUpdatedDate": 1732815660418,
  "numberOfFavorites": 0,
  "tags": {
    "0": "/circuit/counter/",
    "1": "/train/loading station/"
  },
  "title": "Circuit to control delivery of rocket part components",
  "favorites": {
    "sfRnxFoxGjPvyPxLEoh754u6Dnk2": true,
    "fwXxoN91hpZRVGqFNhqMsGUaZKq1": true
  }
}
