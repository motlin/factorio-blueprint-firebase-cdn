{
  "authorId": "Kte5ZhE52cfaQtQcVGVAFqYkB4m1",
  "descriptionMarkdown": "## Desc\nDefine the volume you want to keep for each product (for a tank) in the constant combinator (near the 2 refinery)\n- For each products a volume (as negative number)\n- Check icon defines a tolerance threshold (more or less)\n\n## Abstract\nThe idea of this refinery is to have an autonomous system capable of maintaining a certain volume of fluids without requiring interventions to unblock it (extensions of tanks) or of overproduction (solid fuel, etc.). It is not a refinery for mass production or *just-in-time*. Originally I was running a blueprint from an evolving refinery (mid-game / end-game), and in my use it exposed me to a shortage of lubricant. In my game, I count on this refinery to supply tank trains intended to deliver certain sectors of my factory. In this case the sector which produces the (blue) belts, conveyors and balancers.\n\n## Example\n#### Params (default)\nscreenshot : https://i.imgur.com/QzqxL5h.jpeg\n- Crude oil: -20k\n- Light oil: -20k\n- Gas: -20k\n- Lubricant: -20k\n- Tolerance (check icon): 1400\n\n#### Result:\n\nAim to keep 20k of each products in the first tank of each storage line until each storage reach 20k mor or less 1400. When your storage is balanced, a pump stop the water input and switch off the refinery. \n\n## Logic system\nOn the top left area, 5 groups of *Decider combinator* controls the pumps that input each conversion devices.\n\nscreenshot : https://i.imgur.com/KQ3Psj0.jpeg\n\n- [A] = 2 -> Heavy oil cracking (too much heavy oil, enough lubricant)\n- [B] = 2 -> Rocket fuel (too much light oil and gas)\n- [C] = 1 -> Solid fuel (too much gas)\n- [D] = 1 -> Lubricant\n- [E] = 2 -> Light oil cracking (need more gas)\n\nOn the top right there are *Arithmetic combinator* which control each product levels, more or less tolerance value. When the 4 levels are satisfied, it interrupts the water input to put the refinery on hold.\n\nscreenshot : https://i.imgur.com/OT3JgEo.jpeg\n\n- *(wanted volume - current volume) / Tolerance*  = Calculate the difference between what we want and what we have.\n- *previous result ^ 2* = to get a positive number (as -1 == 1 because it(s the same distance to 0)\n- Output as a *Green signal* (which mean the water input can run)\n- If the sum of each *Green signals* equals zero, it means that each stocks reach the wanted value, more or less tolerance variable.\n\n## Tips\n- Hover the *electric pole* near the *Constant combinator* displays the difference between current and desired volume for each product in real time.\n\nscreenshot : https://i.imgur.com/MKuPv3k.jpeg\n\n- Hover the *electric pole* in the middle display variables that trigger the product conversion devices.\n\nscreenshot : https://i.imgur.com/WFX7Zdv.jpeg\n\n- You can add additional tanks to the North to expand your storage.\n- The balance could be more efficient if the parameters respect the ratio of the production mode used in the refineries.\n- Setting a tolerance level that is too low increases the production of solid fuel oil. A higher tolerance threshold (from 1.4k) will save raw oil and power.",
  "fileName": "factorio.refinery-tweak.jpg",
  "image": {
    "height": 1037,
    "id": "dWo2bYI",
    "type": "image/jpeg",
    "width": 1173
  },
  "title": "Oil Refinery (balanced and configurable)",
  "imageUrl": "https://firebasestorage.googleapis.com/v0/b/facorio-blueprints.appspot.com/o/factorio.refinery-tweak.vars.jpg?alt=media&token=ae1910e9-eb2e-46dc-8d9c-dbcfab074479",
  "author": {
    "userId": "Kte5ZhE52cfaQtQcVGVAFqYkB4m1"
  },
  "blueprintString": "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",
  "createdDate": 1610008751329,
  "lastUpdatedDate": 1610848359683,
  "numberOfFavorites": 7,
  "tags": {
    "0": "/mods/vanilla/",
    "1": "/production/oil processing/",
    "2": "/circuit/counter/"
  },
  "favorites": {
    "GXju68xMClhYkuU0t3JuVu7Xnrz1": true,
    "2Ax8dUhZHqOMzMlGKBVrRXgsSSw1": true,
    "pehRmNuQphSBCMpNKRwo4Sj2loA3": true,
    "OMY7H8bm6adCpTES0o41lxXY71P2": true,
    "jMYQWABSfpgdHXThnwMnAwckPvE3": true,
    "OUAH7uiTFoUSxgIOjml5eKmTlpY2": true,
    "JCRXlQnTcsNY8LRfI5hUEJZ0JCr1": true,
    "iv6mBeP5HSOHany0gQmlB0EIbI52": true
  }
}
