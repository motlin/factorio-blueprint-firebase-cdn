{
  "author": {
    "userId": "tLOldK1xqUO06KUKr9Q6MHsisHo2"
  },
  "authorId": "tLOldK1xqUO06KUKr9Q6MHsisHo2",
  "blueprintString": "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",
  "createdDate": 1739358311194,
  "descriptionMarkdown": "### Summary\nA smoothing register that periodically samples a fluctuating input and holds that value constant until the next sampling pulse. Useful for debouncing requester chest demands.\n\n### Description\nThis device smooths out rapidly fluctuating item signals by periodically sampling the input and holding that value constant until the next sample is taken. In effect, the circuit “debounces” the input. The device was created to reduce power wasted by logistic drones constantly supplying then taking away items to requester chests wired to demand items dynamically.\n\n### Components\n- Clock (a.k.a. \"free-running counter\")\n  - Constant combinator: Outputs a C signal with quantity 1. Also outputs period signal P (e.g. P=60).\n  - Decider combinator: Outputs the C signal back to its input if the C signal is less than P in quantity. Since a decider combinator with its output tied to its input will cause the output to be added to the signal generated every game tick by the constant combinator, the result is a counter that cycles from 1 to P, advancing by 1 every game tick.\n\n- Reset Signal Generator (a.k.a. \"sampling strobe\")\n  - Decider combinator: Receives as input the C signal from the clock. Checks if C equals exactly 1 each game tick. If so, it outputs the reset signal R. Since C equals 1 only one tick every P game ticks, the R signal is pulsed for only a single tick every P game ticks.\n\n- Inventory Updater (a.k.a. \"data sampler\")\n  - Decider combinator: Receives as input the R signal from the Reset Signal Generator. It also receives as input the fluctuating item list. If R equals 1, the Inventory Updater outputs a snapshot of the fluctuating item list for one game tick.\n\n- Memory Cell (a.k.a. \"storage register\")\n  - Arithmetic combinator: Receives as input the item list snapshot from the Inventory updater. It also receives as input its own output. It also receives, as input, the output of the Memory Cell Updater. The arithmetic operation the Memory Cell performs is simply to add 0 (i.e. nothing) to its input when generating its output. The Memory Cell generates two outputs: the first is the aforementioned signal it sends to its input; the second is an identical signal sent to the Memory Cell Negator.\n\n- Memory Cell Negator (a.k.a. \"complement generator\")\n  - Arithmetic combinator: Receives as input the output of the Memory Cell. The arithmetic operation performed is a negation of this input: the Memory Cell output it receives is multiplied by -1. The output of the Memory Cell Negator is passed on to the Memory Cell Updater.\n\n- Memory Cell Updater (a.k.a. \"write-enable controller\")\n  - Decider combinator: Receives as input the negated item list from the Memory Cell Negator. Also receives as input the reset signal R generated by the Reset Signal Generator. Each game tick, it checks to see if the value of R equals 1. If so, it outputs the negated item list it received from the Memory Cell Negator. This output is sent to the Memory Cell to be added as one of its three inputs. Since one of the Memory Cell's three inputs equals the magnitude of the negated item list but with a positive sign, whenever R equals 1, the stored item list maintained each tick within the Memory Cell is eliminated as the negative and positive item lists are annihilated; at the same time, since R equals 1 during this tick, the latest snapshot of the fluctuating item list is passed to the Memory Cell's input from the Inventory Updater as described earlier.\n\nIn summary, the Clock periodically generates an R signal for one tick. During that tick, two key events occur:\n- The Inventory Updater adds a snapshot of the fluctuating item list to the Memory Cell.\n- The Memory Cell Updater permits the Memory Cell Negator to annihilate the old signal maintained by the Memory Cell.\n\nWhenever the reset signal R is not generated, the Memory Cell Updater keeps the Memory Cell Negator isolated from the Memory Cell. Also, the Memory Cell itself adds its output to its input each game tick, maintaining the item list stored from the most recent time when the reset signal R equaled 1.\n\n### Stats\n- Factorio version: 2.0.34\n- Date published: 2025-02-12\n- Author: Steven Baltakatei Sandoval",
  "image": {
    "id": "QeDOXf2",
    "type": "image/png"
  },
  "imageUrl": "https://imgur.com/QeDOXf2",
  "lastUpdatedDate": 1739358370691,
  "numberOfFavorites": 1,
  "tags": {
    "0": "/version/2,0/"
  },
  "title": "Sample-and-hold signal debouncer",
  "favorites": {
    "RmD3iK6gVxOQfQYp0Pz4ejpz8L82": true,
    "uHiTGEZNS3f2aWTE4B2lSF5YLHS2": true
  }
}
